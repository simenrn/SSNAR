/*
 * This code is written as a part of a Master Thesis
 * the spring of 2016.
 *
 * Thor Eivind Andersen and Mats RÃ¸dseth (Master 2016 @ NTNU)
 */
package no.ntnu.tem.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import no.ntnu.tem.application.Application;
import no.ntnu.tem.robot.Robot;

/**
 * The programs main GUI. Has the responsibility to create all other GUI
 * windows. From the main GUI the user can view all connected robots and the map
 * they are creating. The user can start and stop SLAM/MAPPING and AI and
 * control what comport is in use. There is a info panel at the top helping the
 * user understand the GUI if something was unclear.
 *
 * @author Thor Eivind and Mats (Master 2016 @ NTNU)
 */
public final class MainGUI extends javax.swing.JFrame {

    private final Application app;
    private final ImageIcon greenIcon = new ImageIcon("Images//greenL.png");
    private final ImageIcon redIcon = new ImageIcon("Images//redL.png");
    private ObservableList<Robot> connectedRobots;
    private String shdwPort;

    private LinkedList<String> pl;
    private LinkedList<String> hl;
    private boolean communicationSuccess = false;
    private GridBagConstraints gbc;
    private final boolean debug = false;
    private boolean changeButton3functionality = false;
    private ArrayList<RobotPanel> robotPanels = new ArrayList<RobotPanel>();

    /**
     * Constructor for MainGUI
     *
     * @param app The programs Application
     */
    public MainGUI(Application app) {
        initComponents();
        this.app = app;

        this.setLocationRelativeTo(null);
        lightLabel.setIcon(redIcon);

        initConnectedRobotList();

        showModeSelectionGUI();
        generateHelpMenuItems();

        generateMap();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        lblMode = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        lightLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnlRobots = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        infoTextArea = new javax.swing.JTextArea();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        pnlMap = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        settingsMenu = new javax.swing.JMenu();
        commMenu = new javax.swing.JMenu();
        windowsMenu = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Robot Control Panel");
        setBackground(new java.awt.Color(204, 255, 51));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setPreferredSize(new java.awt.Dimension(200, 80));
        jPanel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel5MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel5MouseExited(evt);
            }
        });

        lblMode.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        lblMode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMode.setText("Real World");
        lblMode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblModeMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblMode, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblMode, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(200, 90));
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel2MouseEntered(evt);
            }
        });

        jPanel6.setPreferredSize(new java.awt.Dimension(40, 40));

        btnStart.setText("Start");
        btnStart.setFocusable(false);
        btnStart.setPreferredSize(new java.awt.Dimension(80, 25));
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });
        jPanel6.add(btnStart);

        btnStop.setText("Stop");
        btnStop.setEnabled(false);
        btnStop.setFocusable(false);
        btnStop.setPreferredSize(new java.awt.Dimension(80, 25));
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });
        jPanel6.add(btnStop);

        lightLabel.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel7.add(lightLabel);

        jLabel2.setText("Program not running");
        jPanel7.add(jLabel2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setEnabled(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 237));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(), "Connected Robots", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Rockwell", 1, 18))); // NOI18N
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseExited(evt);
            }
        });

        pnlRobots.setLayout(new java.awt.GridBagLayout());
        jScrollPane1.setViewportView(pnlRobots);

        jButton1.setText("Particle Filter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Clean Map");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jScrollPane2.setBorder(null);
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane2.setEnabled(false);
        jScrollPane2.setFocusable(false);

        infoTextArea.setEditable(false);
        infoTextArea.setBackground(java.awt.Color.gray);
        infoTextArea.setColumns(20);
        infoTextArea.setLineWrap(true);
        infoTextArea.setRows(5);
        infoTextArea.setAutoscrolls(false);
        infoTextArea.setBorder(null);
        infoTextArea.setFocusable(false);
        infoTextArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                infoTextAreaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                infoTextAreaMouseEntered(evt);
            }
        });
        jScrollPane2.setViewportView(infoTextArea);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jPanel8.setBackground(new java.awt.Color(153, 153, 153));
        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        pnlMap.setBackground(new java.awt.Color(153, 153, 153));
        pnlMap.setPreferredSize(new java.awt.Dimension(30, 30));
        pnlMap.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                pnlMapMouseWheelMoved(evt);
            }
        });
        pnlMap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                pnlMapMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout pnlMapLayout = new javax.swing.GroupLayout(pnlMap);
        pnlMap.setLayout(pnlMapLayout);
        pnlMapLayout.setHorizontalGroup(
            pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 616, Short.MAX_VALUE)
        );
        pnlMapLayout.setVerticalGroup(
            pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 634, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(pnlMap);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );

        fileMenu.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        jMenuBar1.add(fileMenu);

        settingsMenu.setText("Settings");

        commMenu.setText("Com port");
        settingsMenu.add(commMenu);

        jMenuBar1.add(settingsMenu);

        windowsMenu.setText("Window");

        jMenuItem2.setText("Simulator");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        windowsMenu.add(jMenuItem2);

        jMenuBar1.add(windowsMenu);

        helpMenu.setText("Help");
        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        start();
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        stop();
    }//GEN-LAST:event_btnStopActionPerformed

    private void jScrollPane1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseEntered
        infoTextArea.setText("This is the list of all connected robots. Click info for additonal information about that specific robot");
    }//GEN-LAST:event_jScrollPane1MouseEntered

    private void jPanel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel5MouseClicked

    private void jPanel5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MouseEntered
        infoTextArea.setText("Displays the current mode");
    }//GEN-LAST:event_jPanel5MouseEntered

    private void jPanel5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MouseExited

    }//GEN-LAST:event_jPanel5MouseExited

    private void jScrollPane1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseExited

    }//GEN-LAST:event_jScrollPane1MouseExited

    private void infoTextAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoTextAreaMouseClicked
        //beta();
    }//GEN-LAST:event_infoTextAreaMouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        try {
            app.getSim().openGui();
        } catch (NullPointerException npe) {
            if (debug) {
                System.out.println("Need to create simulator before open sim window!");
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void lblModeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModeMouseClicked

    }//GEN-LAST:event_lblModeMouseClicked

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        infoTextArea.setText("");
    }//GEN-LAST:event_formMouseEntered

    private void pnlMapMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlMapMouseEntered
        infoTextArea.setText("This is the map generated from the robots. \n\nBlack = wall, White = space , Light Grey = unreachable area and Dark Grey = undiscovered area");
    }//GEN-LAST:event_pnlMapMouseEntered

    private void infoTextAreaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoTextAreaMouseEntered
        infoTextArea.setText("Info panel: Displays help on whatever the mouse is hovering over");
    }//GEN-LAST:event_infoTextAreaMouseEntered

    private void jPanel2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseEntered
        infoTextArea.setText("Start or stop the program.\nThis starts and stops mapping and AI");
    }//GEN-LAST:event_jPanel2MouseEntered

    private void pnlMapMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_pnlMapMouseWheelMoved

    }//GEN-LAST:event_pnlMapMouseWheelMoved

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        disconnectAllRobots();
        app.turnOffProgram();
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(changeButton3functionality){
            new mapMergeOptions(this, app.getRobotController()).setVisible(true);
        }
        else{
            new ParticleFilterOptions(this).setVisible(true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        app.cleanMap();
    }//GEN-LAST:event_jButton2ActionPerformed
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {
        new AboutGUI().setVisible(true);
    }

    /**
     * Sets the LookAndFeel for the entire GUI
     */
    public static void setLookAndFeel() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    UIManager.getLookAndFeelDefaults().put("nimbusOrange", (new Color(0, 255, 0)));
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        //</editor-fold>
        //</editor-fold>
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JMenu commMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JTextArea infoTextArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblMode;
    private javax.swing.JLabel lightLabel;
    private javax.swing.JPanel pnlMap;
    private javax.swing.JPanel pnlRobots;
    private javax.swing.JMenu settingsMenu;
    private javax.swing.JMenu windowsMenu;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets the connectedRobot list from application and creates a
     * ListChangeListner to the list
     */
    private void initConnectedRobotList() {
        connectedRobots = app.getConnectedRobotList();
        connectedRobots.addListener(new ListChangeListener<Robot>() {
            @Override
            public void onChanged(ListChangeListener.Change<? extends Robot> c) {
                c.next();
                if (c.wasAdded()) {
                    addRobotPanel(c.getAddedSubList().get(0));
                } else if (c.wasRemoved()) {
                    removeRobotPanel(c.getRemoved().get(0));
                }
                updateRobotList();
            }
        });
        gbc = new GridBagConstraints();
        gbc.anchor = GridBagConstraints.SOUTH;
        gbc.gridy = 0;
    }

    /**
     * Adds a graphical robot panel to the connected robot list
     *
     * @param r The robot reference to the panel
     */
    private void addRobotPanel(Robot r) {
        RobotPanel rp = new RobotPanel(r, this);
        robotPanels.add(rp);
    }
    protected void connectRobot(Robot r) {
        app.connectToRobot(r);
        
    }

    /**
     * Removes a graphical robot panel from the connected robot list
     *
     * @param r The robot whos panel should get removed
     */
    private void removeRobotPanel(Robot r) {
        for (int i = 0; i < robotPanels.size(); i++) {
            if (robotPanels.get(i).getRobot().equals(r)) {
                robotPanels.remove(i);
            }
        }
    }

    /**
     * Opens up the modeSelectionGUI
     */
    private void showModeSelectionGUI() {
        this.setVisible(false);

        ModeSelectionGUI msgui = new ModeSelectionGUI(this);
        msgui.setVisible(true);
    }

    /**
     * Generates a Thread that updates the WorldMap
     */
    private void generateMap() {
        MapGraphic map = app.getWorldMap();
        pnlMap.add(map);
        pnlMap.setPreferredSize(map.getSize());
        map.setVisible(true);
        map.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                pnlMapMouseEntered(evt);
            }
        });
        Thread t = new Thread("Map") {
            @Override
            public void run() {
                super.run(); //To change body of generated methods, choose Tools | Templates.
                while (true) {
                    pnlMap.setPreferredSize(map.getSize());
                    map.repaint();
                    jScrollPane3.validate();
//                    System.out.println(connectedRobots.size()+" Roboter er lagt til med handshake confirmed og greier");
                    try {
                        Thread.sleep(50);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };
        t.start();
    }

    /**
     * Generates a list of all COM-ports. The found com-ports gets added to the
     * com-ports menu.
     */
    protected void generateComPortMenuItems() {
        pl = app.getPortList();
        pl.stream().map((i) -> {
            JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(i);
            menuItem.setText(i);
            return menuItem;
        }).map((menuItem) -> {
            menuItem.addActionListener((ActionEvent e) -> {
                JRadioButtonMenuItem clickedMenuItem = (JRadioButtonMenuItem) e.getSource();
                commPortClicked(clickedMenuItem.getText());
                clickedMenuItem.setSelected(true);
            });
            return menuItem;
        }).forEach((menuItem) -> {
            commMenu.add(menuItem);
        });
    }

    /**
     * Generates menu items for each manual inside the manual folder.
     */
    protected void generateHelpMenuItems() {
        if (System.getProperty("os.name").startsWith("Windows")) {
            hl = app.getPDFList();

            hl.stream().map((i) -> {
                JMenuItem menuItem = new JRadioButtonMenuItem(i);
                menuItem.setText(i.split("\\.")[0]);
                return menuItem;
            }).map((menuItem) -> {
                menuItem.addActionListener((ActionEvent e) -> {
                    JMenuItem clickedMenuItem = (JRadioButtonMenuItem) e.getSource();
                    clickedMenuItem.setSelected(false);
                    app.openPDF(clickedMenuItem.getText());
                });
                return menuItem;
            }).forEach((menuItem) -> {
                helpMenu.add(menuItem);
            });

            helpMenu.addSeparator();
        }

        JMenuItem jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem3.setText("About");
        jMenuItem3.addActionListener((java.awt.event.ActionEvent evt) -> {
            jMenuItem3ActionPerformed(evt);
        });
        helpMenu.add(jMenuItem3);

    }

    /**
     * Sets the current mode text.
     *
     * @param s The text to display.
     */
    protected void setModeText(String s) {
        lblMode.setText(s);
    }

    /**
     * Connects to a new Com port. if the application was connected to an old
     * Com port, the old connection gets closed.
     *
     * @param str The port to connect to. E.g. "Com 1"
     */
    private void commPortClicked(String str) {
        if (shdwPort != null && shdwPort.equalsIgnoreCase(str)) {
            return;
        }
        app.setComPort(str);
        shdwPort = str;
        communicationSuccess = app.startCommunication();
        for (int i = 0; i < commMenu.getItemCount(); i++) {
            if (!((JRadioButtonMenuItem) commMenu.getItem(i)).getText().equalsIgnoreCase(str)) {
                ((JRadioButtonMenuItem) commMenu.getItem(i)).setSelected(false);
            }
        }
    }

    /**
     * Getter for the Application
     *
     * @return the application
     */
    protected Application getApplication() {
        return app;
    }

    /**
     * Method called when user presses start.
     */
    private void start() {
        if (debug) {
            System.out.println("Start");
        }
        app.startSystem();

        btnStart.setEnabled(false);
        btnStop.setEnabled(true);
        jLabel2.setText("Program running");
        for(Robot robot : app.getRobotController().getRobotList()){
            if(robot.getParticleFilter() == null){
                jButton1.setEnabled(false);
                break;
            }
            else{
                changeButton3functionality = true;
                jButton1.setText("PF Map");
                break;
            }
        }        lightLabel.setIcon(greenIcon);
    }

    /**
     * Method called when user presses stop.
     */
    private void stop() {
        if (debug) {
            System.out.println("Stop");
        }
        btnStart.setEnabled(true);
        btnStop.setEnabled(false);
        jLabel2.setText("Program not running");
        lightLabel.setIcon(redIcon);
        app.stopSystem();
    }

    /**
     * Opens a ProgressDialog then disconnects all robots that is connected to
     * the system.
     */
    private void disconnectAllRobots() {
        if (connectedRobots.size() > 0) {
            this.setEnabled(false);
            final JDialog dlg = new JDialog(this, "Connecting robots - Progress Dialog", true);
            JProgressBar dpb = new JProgressBar(0, connectedRobots.size() * 2);
            dlg.add(BorderLayout.CENTER, dpb);
            dlg.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
            dlg.setSize(300, 75);
            dlg.setLocationRelativeTo(null);

            final SwingWorker worker;
            worker = new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    int numberOfRobots = connectedRobots.size();
                    for (int i = numberOfRobots - 1; i >= 0; i--) {
                        if (debug) {
                            System.out.println("Disconnecting robot: " + i);
                        }
                        app.disconnectRobot(connectedRobots.get(i).getName());
                        dpb.setValue((numberOfRobots - i) * 2);
                        try {
                            Thread.sleep(250);
                            dpb.setValue((numberOfRobots - i) * 2 + 1);
                            Thread.sleep(250);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        if (i == 0) {
                            dlg.setVisible(false);
                        }
                    }
                    return null;
                }
            };

            worker.execute();
            dlg.setVisible(true);
            this.setEnabled(true);
        }
    }

    /**
     * Updates the ConnectedRobotList, should be called whenever a robot is removed or added, this to ensure correct visual presentation of the robotPanels.
     */
    private void updateRobotList() {
        pnlRobots.removeAll();
        pnlRobots.repaint();
        gbc.weightx = 1;
        gbc.weighty = 0;
        gbc.insets = new Insets(10, 0, 2, 0);
        for (int i = 0; i < robotPanels.size(); i++) {
            if (i == 1) {
                gbc.insets = new Insets(2, 0, 2, 0);
            }
            gbc.gridy = i;
            pnlRobots.add(robotPanels.get(i), gbc);
        }
        JPanel empty = new JPanel();
        gbc.weightx = 0;
        gbc.weighty = 1;
        gbc.gridy = robotPanels.size();
        pnlRobots.add(empty, gbc);
        pnlRobots.revalidate();
    }

    /**
     * Generates extra menu items depending on if the simulator is active or not.
     * If simulator is active it generates menu items to show/hide the simulator
     * If simulator is not active it generates menu items to change COM-port
     * @param simulatorActive true if simulator is active.
     */
    protected void generateMenuItems(boolean simulatorActive) {
        if (simulatorActive) {
            settingsMenu.setVisible(false);
        } else {
            windowsMenu.setVisible(false);
            generateComPortMenuItems();
            settingsMenu.addSeparator();
        }
    }
}
